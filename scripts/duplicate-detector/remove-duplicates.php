#!/usr/bin/env php
<?php

require_once __DIR__ . '/DuplicateRemover.php';

function showHelp()
{
    echo "üßπ Ferramenta de Remo√ß√£o Autom√°tica de Duplicatas\n";
    echo "================================================\n\n";
    echo "Uso: php remove-duplicates.php [op√ß√µes]\n\n";
    echo "Op√ß√µes:\n";
    echo "  --report <arquivo>     Arquivo de relat√≥rio de duplicatas (obrigat√≥rio)\n";
    echo "  --config <arquivo>     Arquivo de configura√ß√£o personalizado\n";
    echo "  --dry-run             Simular remo√ß√£o sem modificar arquivos\n";
    echo "  --backup-dir <dir>    Diret√≥rio personalizado para backup\n";
    echo "  --restore <dir>       Restaurar backup do diret√≥rio especificado\n";
    echo "  --interactive         Modo interativo (confirmar cada remo√ß√£o)\n";
    echo "  --force               For√ßar remo√ß√£o sem confirma√ß√£o\n";
    echo "  --help                Mostrar esta ajuda\n\n";
    echo "Exemplos:\n";
    echo "  php remove-duplicates.php --report duplicate-report.json\n";
    echo "  php remove-duplicates.php --report duplicate-report.json --dry-run\n";
    echo "  php remove-duplicates.php --restore ./backups/2024-01-15_10-30-45\n";
    echo "  php remove-duplicates.php --report duplicate-report.json --interactive\n\n";
}

function parseArguments($argv)
{
    $options = [
        'report' => null,
        'config' => null,
        'dry-run' => false,
        'backup-dir' => null,
        'restore' => null,
        'interactive' => false,
        'force' => false,
        'help' => false
    ];
    
    for ($i = 1; $i < count($argv); $i++) {
        switch ($argv[$i]) {
            case '--report':
                $options['report'] = $argv[++$i] ?? null;
                break;
            case '--config':
                $options['config'] = $argv[++$i] ?? null;
                break;
            case '--dry-run':
                $options['dry-run'] = true;
                break;
            case '--backup-dir':
                $options['backup-dir'] = $argv[++$i] ?? null;
                break;
            case '--restore':
                $options['restore'] = $argv[++$i] ?? null;
                break;
            case '--interactive':
                $options['interactive'] = true;
                break;
            case '--force':
                $options['force'] = true;
                break;
            case '--help':
            case '-h':
                $options['help'] = true;
                break;
            default:
                echo "‚ùå Op√ß√£o desconhecida: {$argv[$i]}\n";
                exit(1);
        }
    }
    
    return $options;
}

function confirmAction($message)
{
    echo "$message (s/N): ";
    $handle = fopen("php://stdin", "r");
    $line = fgets($handle);
    fclose($handle);
    return strtolower(trim($line)) === 's';
}

function simulateRemoval($reportPath)
{
    echo "üîç Simulando remo√ß√£o de duplicatas...\n\n";
    
    if (!file_exists($reportPath)) {
        echo "‚ùå Arquivo de relat√≥rio n√£o encontrado: {$reportPath}\n";
        exit(1);
    }
    
    $report = json_decode(file_get_contents($reportPath), true);
    
    if (empty($report['duplicates'])) {
        echo "‚úÖ Nenhuma duplicata encontrada para remover!\n";
        return;
    }
    
    $totalBlocks = 0;
    $totalGroups = count($report['duplicates']);
    
    foreach ($report['duplicates'] as $index => $duplicate) {
        $blocks = $duplicate['blocks'];
        $totalBlocks += count($blocks);
        
        echo "üìã Grupo #" . ($index + 1) . " - {$duplicate['count']} duplicatas:\n";
        
        foreach ($blocks as $blockIndex => $block) {
            $status = $blockIndex === 0 ? "üíæ [PRESERVAR]" : "üóëÔ∏è  [REMOVER]";
            echo "  $status {$block['file']} (linhas {$block['startLine']}-{$block['endLine']})\n";
        }
        echo "\n";
    }
    
    $toRemove = $totalBlocks - $totalGroups;
    echo "üìä Resumo da simula√ß√£o:\n";
    echo "  ‚Ä¢ Total de grupos: $totalGroups\n";
    echo "  ‚Ä¢ Total de blocos: $totalBlocks\n";
    echo "  ‚Ä¢ Blocos a preservar: $totalGroups\n";
    echo "  ‚Ä¢ Blocos a remover: $toRemove\n\n";
    echo "üí° Use sem --dry-run para executar a remo√ß√£o real.\n";
}

function main($argv)
{
    $options = parseArguments($argv);
    
    if ($options['help']) {
        showHelp();
        exit(0);
    }
    
    // Modo de restaura√ß√£o
    if ($options['restore']) {
        echo "üîÑ Iniciando restaura√ß√£o de backup...\n\n";
        
        if (!$options['force'] && !confirmAction("‚ö†Ô∏è  Isso ir√° sobrescrever os arquivos atuais. Continuar?")) {
            echo "‚ùå Opera√ß√£o cancelada.\n";
            exit(0);
        }
        
        try {
            $remover = new DuplicateRemover($options['config']);
            $restored = $remover->restoreBackup($options['restore']);
            echo "\n‚úÖ Restaura√ß√£o conclu√≠da! Arquivos restaurados: $restored\n";
        } catch (Exception $e) {
            echo "‚ùå Erro na restaura√ß√£o: " . $e->getMessage() . "\n";
            exit(1);
        }
        
        exit(0);
    }
    
    // Verificar se o relat√≥rio foi fornecido
    if (!$options['report']) {
        echo "‚ùå Erro: Arquivo de relat√≥rio √© obrigat√≥rio.\n";
        echo "Use --help para ver as op√ß√µes dispon√≠veis.\n";
        exit(1);
    }
    
    // Modo dry-run
    if ($options['dry-run']) {
        simulateRemoval($options['report']);
        exit(0);
    }
    
    // Remo√ß√£o real
    echo "üßπ Iniciando remo√ß√£o de duplicatas...\n\n";
    
    if (!$options['force'] && !$options['interactive']) {
        if (!confirmAction("‚ö†Ô∏è  Isso ir√° modificar seus arquivos. Um backup ser√° criado. Continuar?")) {
            echo "‚ùå Opera√ß√£o cancelada.\n";
            exit(0);
        }
    }
    
    try {
        $remover = new DuplicateRemover($options['config']);
        
        if ($options['interactive']) {
            echo "ü§ù Modo interativo ativado. Voc√™ ser√° consultado para cada grupo.\n\n";
            // TODO: Implementar modo interativo
            echo "‚ö†Ô∏è  Modo interativo ainda n√£o implementado. Use --force para continuar.\n";
            exit(1);
        }
        
        $result = $remover->removeIntelligent($options['report']);
        
        echo "\nüéâ Processo conclu√≠do com sucesso!\n";
        echo "üìä Estat√≠sticas finais:\n";
        echo "  ‚Ä¢ Blocos removidos: {$result['removed']}\n";
        echo "  ‚Ä¢ Blocos preservados: {$result['preserved']}\n";
        echo "  ‚Ä¢ Backup salvo em: {$result['backup']}\n\n";
        echo "üí° Para desfazer as altera√ß√µes, use:\n";
        echo "   php remove-duplicates.php --restore {$result['backup']}\n";
        
    } catch (Exception $e) {
        echo "‚ùå Erro durante a remo√ß√£o: " . $e->getMessage() . "\n";
        exit(1);
    }
}

// Verificar se o PHP est√° sendo executado via CLI
if (php_sapi_name() !== 'cli') {
    echo "‚ùå Este script deve ser executado via linha de comando.\n";
    exit(1);
}

// Executar fun√ß√£o principal
main($argv);