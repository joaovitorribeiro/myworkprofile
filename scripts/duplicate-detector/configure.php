#!/usr/bin/env php
<?php

function showHelp()
{
    echo "‚öôÔ∏è  Configurador de Detec√ß√£o de Duplicatas\n";
    echo "=========================================\n\n";
    echo "Uso: php configure.php [op√ß√µes]\n\n";
    echo "Op√ß√µes:\n";
    echo "  --project-type <tipo>     Tipo do projeto (laravel, react, vue, generic)\n";
    echo "  --create-config           Criar nova configura√ß√£o interativa\n";
    echo "  --update-ignore           Atualizar arquivo .duplicateignore\n";
    echo "  --validate                Validar configura√ß√£o atual\n";
    echo "  --reset                   Resetar para configura√ß√£o padr√£o\n";
    echo "  --show-current            Mostrar configura√ß√£o atual\n";
    echo "  --help                    Mostrar esta ajuda\n\n";
    echo "Exemplos:\n";
    echo "  php configure.php --project-type laravel\n";
    echo "  php configure.php --create-config\n";
    echo "  php configure.php --validate\n";
}

function getProjectTemplates()
{
    return [
        'laravel' => [
            'description' => 'Projeto Laravel/PHP',
            'fileExtensions' => ['php', 'blade.php', 'js', 'vue', 'css', 'scss'],
            'ignorePaths' => ['vendor', 'storage', 'bootstrap/cache', 'node_modules'],
            'ignoreFiles' => ['composer.lock', 'package-lock.json'],
            'specialRules' => [
                'ignoreMigrations' => true,
                'ignoreSeeds' => true,
                'preserveControllers' => true
            ]
        ],
        'react' => [
            'description' => 'Projeto React/JavaScript',
            'fileExtensions' => ['js', 'jsx', 'ts', 'tsx', 'css', 'scss', 'less'],
            'ignorePaths' => ['node_modules', 'build', 'dist', 'coverage'],
            'ignoreFiles' => ['package-lock.json', 'yarn.lock'],
            'specialRules' => [
                'ignoreTests' => false,
                'preserveHooks' => true
            ]
        ],
        'vue' => [
            'description' => 'Projeto Vue.js',
            'fileExtensions' => ['vue', 'js', 'ts', 'css', 'scss', 'less'],
            'ignorePaths' => ['node_modules', 'dist', 'coverage'],
            'ignoreFiles' => ['package-lock.json', 'yarn.lock'],
            'specialRules' => [
                'ignoreComponents' => false,
                'preserveComposables' => true
            ]
        ],
        'generic' => [
            'description' => 'Projeto gen√©rico',
            'fileExtensions' => ['php', 'js', 'py', 'java', 'c', 'cpp', 'cs'],
            'ignorePaths' => ['node_modules', 'vendor', 'build', 'dist'],
            'ignoreFiles' => [],
            'specialRules' => []
        ]
    ];
}

function createConfigForProject($projectType)
{
    $templates = getProjectTemplates();
    
    if (!isset($templates[$projectType])) {
        echo "‚ùå Tipo de projeto inv√°lido: $projectType\n";
        echo "Tipos dispon√≠veis: " . implode(', ', array_keys($templates)) . "\n";
        return false;
    }
    
    $template = $templates[$projectType];
    
    echo "üîß Criando configura√ß√£o para: {$template['description']}\n";
    
    $config = [
        'projectType' => $projectType,
        'description' => "Configura√ß√£o para {$template['description']}",
        'version' => '2.0',
        'analysis' => [
            'minLines' => 3,
            'minTokens' => 50,
            'similarity' => 0.85,
            'fileExtensions' => $template['fileExtensions']
        ],
        'ignore' => [
            'paths' => $template['ignorePaths'],
            'files' => $template['ignoreFiles'],
            'patterns' => []
        ],
        'removal' => [
            'strategy' => 'intelligent',
            'backup' => [
                'enabled' => true,
                'directory' => './backups'
            ]
        ],
        'reporting' => [
            'format' => 'json',
            'outputFile' => 'duplicate-report.json',
            'verbosity' => 'detailed'
        ]
    ];
    
    // Adicionar regras espec√≠ficas do projeto
    if (!empty($template['specialRules'])) {
        $config['projectSpecific'][$projectType] = $template['specialRules'];
    }
    
    $configFile = __DIR__ . '/config.json';
    file_put_contents($configFile, json_encode($config, JSON_PRETTY_PRINT));
    
    echo "‚úÖ Configura√ß√£o criada: $configFile\n";
    
    // Criar .duplicateignore espec√≠fico se n√£o existir
    createIgnoreFile($projectType, $template);
    
    return true;
}

function createIgnoreFile($projectType, $template)
{
    $ignoreFile = __DIR__ . '/.duplicateignore';
    
    if (file_exists($ignoreFile)) {
        echo "‚ö†Ô∏è  Arquivo .duplicateignore j√° existe. Use --update-ignore para atualizar.\n";
        return;
    }
    
    $content = "# Configura√ß√£o de ignore para projeto $projectType\n";
    $content .= "# Gerado automaticamente em " . date('Y-m-d H:i:s') . "\n\n";
    
    // Adicionar padr√µes espec√≠ficos do tipo de projeto
    switch ($projectType) {
        case 'laravel':
            $content .= "# Laravel espec√≠fico\n";
            $content .= "vendor/\n";
            $content .= "storage/\n";
            $content .= "bootstrap/cache/\n";
            $content .= "database/migrations/*.php\n";
            $content .= "database/seeders/*.php\n";
            $content .= "*.blade.php\n";
            break;
            
        case 'react':
            $content .= "# React espec√≠fico\n";
            $content .= "node_modules/\n";
            $content .= "build/\n";
            $content .= "dist/\n";
            $content .= "coverage/\n";
            $content .= "src/serviceWorker.js\n";
            $content .= "src/setupTests.js\n";
            break;
            
        case 'vue':
            $content .= "# Vue espec√≠fico\n";
            $content .= "node_modules/\n";
            $content .= "dist/\n";
            $content .= "coverage/\n";
            break;
    }
    
    $content .= "\n# Arquivos comuns\n";
    $content .= "*.min.js\n";
    $content .= "*.min.css\n";
    $content .= "*.log\n";
    $content .= ".DS_Store\n";
    $content .= "Thumbs.db\n";
    
    file_put_contents($ignoreFile, $content);
    echo "‚úÖ Arquivo .duplicateignore criado\n";
}

function createInteractiveConfig()
{
    echo "üéØ Configura√ß√£o Interativa\n";
    echo "=========================\n\n";
    
    // Tipo de projeto
    echo "Selecione o tipo de projeto:\n";
    $templates = getProjectTemplates();
    $options = array_keys($templates);
    
    foreach ($options as $index => $type) {
        echo "  " . ($index + 1) . ". $type - {$templates[$type]['description']}\n";
    }
    
    echo "\nEscolha (1-" . count($options) . "): ";
    $choice = (int)trim(fgets(STDIN)) - 1;
    
    if ($choice < 0 || $choice >= count($options)) {
        echo "‚ùå Escolha inv√°lida\n";
        return false;
    }
    
    $projectType = $options[$choice];
    
    // Configura√ß√µes de an√°lise
    echo "\nüìä Configura√ß√µes de An√°lise\n";
    echo "Linhas m√≠nimas para considerar duplicata (padr√£o: 3): ";
    $minLines = trim(fgets(STDIN));
    $minLines = $minLines ?: 3;
    
    echo "Similaridade m√≠nima 0-1 (padr√£o: 0.85): ";
    $similarity = trim(fgets(STDIN));
    $similarity = $similarity ?: 0.85;
    
    // Estrat√©gia de remo√ß√£o
    echo "\nüóëÔ∏è  Estrat√©gia de Remo√ß√£o\n";
    echo "1. Inteligente (recomendado)\n";
    echo "2. Simples\n";
    echo "Escolha (1-2): ";
    $strategyChoice = (int)trim(fgets(STDIN));
    $strategy = $strategyChoice === 2 ? 'simple' : 'intelligent';
    
    // Criar configura√ß√£o
    $template = $templates[$projectType];
    $config = [
        'projectType' => $projectType,
        'description' => "Configura√ß√£o personalizada para {$template['description']}",
        'version' => '2.0',
        'analysis' => [
            'minLines' => (int)$minLines,
            'minTokens' => 50,
            'similarity' => (float)$similarity,
            'fileExtensions' => $template['fileExtensions']
        ],
        'ignore' => [
            'paths' => $template['ignorePaths'],
            'files' => $template['ignoreFiles'],
            'patterns' => []
        ],
        'removal' => [
            'strategy' => $strategy,
            'backup' => [
                'enabled' => true,
                'directory' => './backups'
            ]
        ],
        'reporting' => [
            'format' => 'json',
            'outputFile' => 'duplicate-report.json',
            'verbosity' => 'detailed'
        ]
    ];
    
    $configFile = __DIR__ . '/config.json';
    file_put_contents($configFile, json_encode($config, JSON_PRETTY_PRINT));
    
    echo "\n‚úÖ Configura√ß√£o personalizada criada!\n";
    createIgnoreFile($projectType, $template);
    
    return true;
}

function validateConfig()
{
    echo "üîç Validando configura√ß√£o...\n";
    
    $configFile = __DIR__ . '/config.json';
    
    if (!file_exists($configFile)) {
        echo "‚ùå Arquivo config.json n√£o encontrado\n";
        return false;
    }
    
    $config = json_decode(file_get_contents($configFile), true);
    
    if (json_last_error() !== JSON_ERROR_NONE) {
        echo "‚ùå Erro no JSON: " . json_last_error_msg() . "\n";
        return false;
    }
    
    $errors = [];
    
    // Validar campos obrigat√≥rios
    $required = ['analysis', 'ignore', 'removal', 'reporting'];
    foreach ($required as $field) {
        if (!isset($config[$field])) {
            $errors[] = "Campo obrigat√≥rio ausente: $field";
        }
    }
    
    // Validar extens√µes de arquivo
    if (empty($config['analysis']['fileExtensions'])) {
        $errors[] = "Nenhuma extens√£o de arquivo configurada";
    }
    
    // Validar similaridade
    $similarity = $config['analysis']['similarity'] ?? 0;
    if ($similarity < 0 || $similarity > 1) {
        $errors[] = "Similaridade deve estar entre 0 e 1";
    }
    
    if (empty($errors)) {
        echo "‚úÖ Configura√ß√£o v√°lida!\n";
        echo "üìä Projeto: " . ($config['projectType'] ?? 'n√£o especificado') . "\n";
        echo "üìÅ Extens√µes: " . implode(', ', $config['analysis']['fileExtensions']) . "\n";
        echo "üéØ Similaridade: " . $config['analysis']['similarity'] . "\n";
        return true;
    } else {
        echo "‚ùå Erros encontrados:\n";
        foreach ($errors as $error) {
            echo "  ‚Ä¢ $error\n";
        }
        return false;
    }
}

function showCurrentConfig()
{
    $configFile = __DIR__ . '/config.json';
    
    if (!file_exists($configFile)) {
        echo "‚ùå Arquivo config.json n√£o encontrado\n";
        return false;
    }
    
    echo "üìã Configura√ß√£o Atual\n";
    echo "====================\n\n";
    
    $config = json_decode(file_get_contents($configFile), true);
    
    echo "Tipo do Projeto: " . ($config['projectType'] ?? 'n√£o especificado') . "\n";
    echo "Vers√£o: " . ($config['version'] ?? 'n√£o especificada') . "\n";
    echo "Descri√ß√£o: " . ($config['description'] ?? 'n√£o especificada') . "\n\n";
    
    echo "üìä An√°lise:\n";
    echo "  ‚Ä¢ Linhas m√≠nimas: " . ($config['analysis']['minLines'] ?? 'n√£o especificado') . "\n";
    echo "  ‚Ä¢ Similaridade: " . ($config['analysis']['similarity'] ?? 'n√£o especificado') . "\n";
    echo "  ‚Ä¢ Extens√µes: " . implode(', ', $config['analysis']['fileExtensions'] ?? []) . "\n\n";
    
    echo "üö´ Ignorar:\n";
    echo "  ‚Ä¢ Caminhos: " . implode(', ', $config['ignore']['paths'] ?? []) . "\n";
    echo "  ‚Ä¢ Arquivos: " . implode(', ', $config['ignore']['files'] ?? []) . "\n\n";
    
    echo "üóëÔ∏è  Remo√ß√£o:\n";
    echo "  ‚Ä¢ Estrat√©gia: " . ($config['removal']['strategy'] ?? 'n√£o especificada') . "\n";
    echo "  ‚Ä¢ Backup: " . ($config['removal']['backup']['enabled'] ? 'habilitado' : 'desabilitado') . "\n";
    
    return true;
}

function resetConfig()
{
    echo "‚ö†Ô∏è  Isso ir√° resetar a configura√ß√£o para o padr√£o. Continuar? (s/N): ";
    $confirm = trim(fgets(STDIN));
    
    if (strtolower($confirm) !== 's') {
        echo "‚ùå Opera√ß√£o cancelada\n";
        return false;
    }
    
    $defaultConfig = __DIR__ . '/config.json';
    $backupConfig = __DIR__ . '/config.json.backup';
    
    // Fazer backup da configura√ß√£o atual
    if (file_exists($defaultConfig)) {
        copy($defaultConfig, $backupConfig);
        echo "üíæ Backup criado: config.json.backup\n";
    }
    
    // Copiar configura√ß√£o padr√£o
    $advancedConfig = __DIR__ . '/advanced-config.json';
    if (file_exists($advancedConfig)) {
        copy($advancedConfig, $defaultConfig);
        echo "‚úÖ Configura√ß√£o resetada para o padr√£o\n";
    } else {
        echo "‚ùå Arquivo de configura√ß√£o padr√£o n√£o encontrado\n";
        return false;
    }
    
    return true;
}

function main($argv)
{
    if (count($argv) < 2) {
        showHelp();
        exit(1);
    }
    
    $option = $argv[1];
    
    switch ($option) {
        case '--project-type':
            if (!isset($argv[2])) {
                echo "‚ùå Especifique o tipo do projeto\n";
                exit(1);
            }
            createConfigForProject($argv[2]);
            break;
            
        case '--create-config':
            createInteractiveConfig();
            break;
            
        case '--validate':
            validateConfig();
            break;
            
        case '--show-current':
            showCurrentConfig();
            break;
            
        case '--reset':
            resetConfig();
            break;
            
        case '--help':
        case '-h':
            showHelp();
            break;
            
        default:
            echo "‚ùå Op√ß√£o desconhecida: $option\n";
            showHelp();
            exit(1);
    }
}

// Verificar se est√° sendo executado via CLI
if (php_sapi_name() !== 'cli') {
    echo "‚ùå Este script deve ser executado via linha de comando.\n";
    exit(1);
}

main($argv);